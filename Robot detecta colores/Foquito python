import cv2
import numpy as np
import serial,time

arduino = serial.Serial('COM4',9600, timeout=.1)
time.sleep(10)

# Mensajes configurables para cada color
color = ['Verde', 'Azul', 'Rojo' , 'Rojo',  'Morado', 'Amarillo'] #'Negro', 'Blanco']
coloresdemarca = [(0,255,0), (255,0,0), (0,0,255), (0,0,255), (255,0,128),(0,255,255)] #(0,0,0), (255,255,255)]

def buscar(masks):
    for i in range(len(masks)):
        contornos,_ = cv2.findContours(masks[i], cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        for c in contornos:
            area = cv2.contourArea(c)
            #print(area)
            if area > 3000:
                M = cv2.moments(c)
                if (M["m00"]==0): M["m00"]=1
                x = int(M["m10"]/M["m00"])
                y = int(M['m01']/M['m00'])
                # Regresar indice del color encontrado, coordenadas y contorno
                return i,x,y,c
    # Regresar indice de ninguno (-1) encontrado, coordenadas que no se usan y contorno vacio
    return -1, -1, -1, None


def marcar(frame, c, x, y, color):
    nuevoContorno = cv2.convexHull(c)
    cv2.putText(frame,'{},{}'.format(x,y),(x+10,y), font, 0.75,(0,255,0),1,cv2.LINE_AA)
    cv2.drawContours(frame, [nuevoContorno], 0, color, 3)
    return frame

cap = cv2.VideoCapture(0)

#naranjaBajo=np.array([6,100,20],np.uint8)
#naranjaAlto = np.array([10,255,255],np.uint8)

verdeBajo = np.array([36,100,20],np.uint8)
verdeAlto = np.array([70,255,255],np.uint8)

azulBajo = np.array([100,100,20],np.uint8)
azulAlto = np.array([110,255,255],np.uint8)

#amarilloBajo = np.array([20,100,20],np.uint8)
#amarilloAlto = np.array([32,255,255],np.uint8)

redBajo1 = np.array([0,100,20],np.uint8)
redAlto1 = np.array([4,255,255],np.uint8)

redBajo2 = np.array([175,100,20],np.uint8)
redAlto2 = np.array([179,255,255],np.uint8)

#cyanBajo = np.array([85,100,20],np.uint8)
#cyanAlto = np.array([95,255,255],np.uint8)

moradoBajo = np.array([115,100,20],np.uint8)
moradoAlto = np.array([160,255,255],np.uint8)

amarilloBajo = np.array([12,100,20],np.uint8)
amarilloAlto = np.array([32,255,255],np.uint8)
#negroBajo = np.array([0, 0, 0])
#negroAlto = np.array([350,55,100])

#blancoBajo = np.array([0,0,200],np.uint8)
#blancoAlto = np.array([180,20,255],np.uint8)

objeto = False

font = cv2.FONT_HERSHEY_SIMPLEX
no_objeto = 1
while True:
  ret,frame = cap.read()
  if ret == True:
    frameHSV = cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)
    #maskNaranja = cv2.inRange(frameHSV,naranjaBajo,naranjaAlto)
    maskAzul = cv2.inRange(frameHSV,azulBajo,azulAlto)
    maskRojo1 = cv2.inRange(frameHSV,redBajo1,redAlto1)
    maskRojo2 = cv2.inRange(frameHSV,redBajo2,redAlto2)
    maskVerde = cv2.inRange(frameHSV,verdeBajo,verdeAlto)
    #maskCyan = cv2.inRange(frameHSV,cyanBajo,cyanAlto)
    maskMorado = cv2.inRange(frameHSV,moradoBajo,moradoAlto)
    #maskNegro = cv2.inRange(frameHSV,negroBajo,negroAlto)
    #maskBlanco = cv2.inRange(frameHSV,blancoBajo,blancoAlto)    
    maskAmarillo = cv2.inRange(frameHSV,amarilloBajo,amarilloAlto)
    
    # Respetar el orden 
    # color =  ['Amarillo', 'Verde', 'Azul', 'Rojo' , 'Rojo ' ,'Cyan', 'Morado', 'Negro', 'Blanco', 'Naranja']
    mascaras = [maskVerde, maskAzul, maskRojo1, maskRojo2, maskMorado, maskAmarillo ] #maskNegro, maskBlanco]
    indice, x, y, contorno = buscar(mascaras)
    # Si encontro algun color marcar
    if indice >-1:
        objeto = marcar( frame, contorno, x, y, coloresdemarca[indice])
        cv2.imshow('frame',objeto)
        # Si esta en un rango de la camara
        if x>20 and x<565 and y>20 and y<420:   #arreglar rangos
            if indice == 0:
                print("Verde")
                arduino.write(b'S') 
            if indice == 1 or indice == 2 or indice == 3 or indice == 5:
                print("Hola")
                arduino.write(b'P') 
            if indice == 0 or indice == 1 or indice == 2 or indice == 3 or indice == 4 or indice == 5:
                print("LOL")
                arduino.write(b'L') 
            if indice == 4:
                print("Adios")
                arduino.write(b'M')
    else:
        cv2.imshow('frame',frame)
        print("N") 
        arduino.write(b'N')
    key = cv2.waitKey(1)
    if key == ord('q'):
        break   
cap.release()
cv2.destroyAllWindows()
arduino.close()
